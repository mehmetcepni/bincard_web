import axios from 'axios';

// Axios instance olu≈ütur
const axiosInstance = axios.create({
  baseURL: '/api',  // Vite proxy √ºzerinden y√∂nlendirilecek
  timeout: 15000,   // 15 saniye timeout
  headers: {
    'Content-Type': 'application/json'
  }
});

// Request interceptor - token ekleme
axiosInstance.interceptors.request.use(
  (config) => {
    // Hem accessToken hem token anahtarƒ±nƒ± kontrol et
    const token = localStorage.getItem('accessToken') || localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('[AUTH] Authorization header eklendi:', token);
    } else {
      console.warn('[AUTH] Authorization header eklenmedi, token bulunamadƒ±!');
    }
    // ƒ∞stek detaylarƒ±nƒ± logla
    console.log('üöÄ ƒ∞stek g√∂nderiliyor:', {
      url: `${config.baseURL}${config.url}`,
      method: config.method?.toUpperCase(),
      headers: config.headers,
      data: config.data ? {
        ...config.data,
        password: config.data.password ? '[Gƒ∞ZLƒ∞]' : undefined
      } : undefined
    });
    return config;
  },
  (error) => {
    console.error('‚ùå ƒ∞stek hatasƒ±:', error);
    return Promise.reject(error);
  }
);

// Response interceptor
axiosInstance.interceptors.response.use(
  (response) => {
    // Ba≈üarƒ±lƒ± yanƒ±tƒ± logla
    console.log('‚úÖ Ba≈üarƒ±lƒ± yanƒ±t:', {
      status: response.status,
      statusText: response.statusText,
      data: response.data,
      headers: response.headers,
      url: response.config.url
    });
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    // Token expired ise ve daha √∂nce refresh denenmediyse
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      const refreshToken = localStorage.getItem('refreshToken');
      if (refreshToken) {
        try {
          const data = await AuthService.refreshToken(refreshToken);
          if (data.success && data.accessToken && data.refreshToken) {
            localStorage.setItem('accessToken', data.accessToken.token);
            localStorage.setItem('refreshToken', data.refreshToken.token);
            // Yeni token ile isteƒüi tekrar dene
            originalRequest.headers['Authorization'] = `Bearer ${data.accessToken.token}`;
            return axiosInstance(originalRequest);
          } else {
            // Refresh ba≈üarƒ±sƒ±zsa logout
            localStorage.removeItem('accessToken');
            localStorage.removeItem('refreshToken');
            window.location.href = '/login';
            return Promise.reject(new Error(data.message || 'Oturum s√ºresi doldu. L√ºtfen tekrar giri≈ü yapƒ±n.'));
          }
        } catch (refreshError) {
          localStorage.removeItem('accessToken');
          localStorage.removeItem('refreshToken');
          window.location.href = '/login';
          return Promise.reject(refreshError);
        }
      }
    }
    // Hata detaylarƒ±nƒ± logla
    console.error('‚ùå Axios Hatasƒ±:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      url: error.config?.url,
      method: error.config?.method,
      headers: error.config?.headers
    });
    
    // 403 hatalarƒ± i√ßin sadece kritik endpoint'lerde logout yap
    if (error.response?.status === 403) {
      const isAuthEndpoint = error.config?.url?.includes('/auth/') || 
                            error.config?.url?.includes('/login') || 
                            error.config?.url?.includes('/register');
      
      if (isAuthEndpoint) {
        // Sadece auth endpoint'lerinde token ge√ßersizse logout yap
        console.warn('üîê Auth endpoint token ge√ßersiz, logout yapƒ±lƒ±yor');
        localStorage.removeItem('accessToken');
        localStorage.removeItem('token');
        localStorage.removeItem('refreshToken');
        window.location.href = '/login';
      } else {
        // Diƒüer endpoint'lerde sadece uyarƒ± ver
        console.warn('üîê Non-auth endpoint i√ßin 403 hatasƒ±, logout yapƒ±lmƒ±yor');
      }
    }
    return Promise.reject(error);
  }
);

// Error handler
const handleError = (error) => {
  console.error('Hata ƒ∞≈üleme Detaylarƒ±:', {
    originalError: {
      message: error.message,
      name: error.name,
      code: error.code,
      stack: error.stack
    },
    response: {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data
    },
    request: {
      url: error.config?.url ? `${error.config.baseURL}${error.config.url}` : undefined,
      method: error.config?.method,
      headers: error.config?.headers
    }
  });

  if (error.code === 'ECONNABORTED') {
    throw new Error('Sunucu yanƒ±t vermedi. L√ºtfen daha sonra tekrar deneyin.');
  }

  if (!error.response) {
    throw new Error('Sunucuya baƒülanƒ±lamadƒ±. L√ºtfen internet baƒülantƒ±nƒ±zƒ± ve backend sunucusunun √ßalƒ±≈ütƒ±ƒüƒ±nƒ± kontrol edin.');
  }

  // Eƒüer backend 401 d√∂nd√ºrd√º ve response.data yoksa, √∂zel mesaj ver
  if (error.response.status === 401 && !error.response.data) {
    throw new Error('Girilen ≈üifre ile telefon numarasƒ± e≈üle≈ümiyor');
  }

  // Backend'den gelen hata mesajƒ±nƒ± kullan
  const errorMessage = error.response?.data?.message 
    || error.response?.data?.error 
    || error.message 
    || 'Bir hata olu≈ütu';

  throw new Error(errorMessage);
};

const AuthService = {
  // Test baƒülantƒ±sƒ±
  testConnection: async () => {
    try {
      console.log('Backend baƒülantƒ±sƒ± test ediliyor...');
      const response = await axiosInstance.options('/user/sign-up');
      console.log('Backend baƒülantƒ± testi ba≈üarƒ±lƒ±:', response.data);
      return true;
    } catch (error) {
      if (error.response?.status === 403 || error.response?.status === 401) {
        console.log('Backend √ßalƒ±≈üƒ±yor ama yetkilendirme gerekiyor');
        return true;
      }
      console.error('Backend baƒülantƒ± testi ba≈üarƒ±sƒ±z:', error);
      return false;
    }
  },

  // Kayƒ±t olma i≈ülemi
  register: async (userData) => {
    try {
      console.log('Register isteƒüi ba≈ülatƒ±lƒ±yor:', {
        ...userData,
        password: '[Gƒ∞ZLƒ∞]'
      });

      // Telefon numarasƒ±nƒ± +90 ile ba≈ülat
      let telephone = userData.telephone;
      if (!telephone.startsWith('+90')) {
        telephone = '+90' + telephone.replace(/^0/, '');
      }

      const formData = {
        firstName: userData.firstName,
        lastName: userData.lastName,
        telephone: telephone,
        password: userData.password,
        deviceUuid: userData.deviceUuid,
        fcmToken: userData.fcmToken
      };

      console.log('Backend\'e g√∂nderilecek veriler:', {
        ...formData,
        password: '[Gƒ∞ZLƒ∞]'
      });

      const response = await axios.post('http://localhost:8080/v1/api/user/sign-up', formData, {
        headers: { 'Content-Type': 'application/json' }
      });
      
      console.log('Backend\'den gelen yanƒ±t:', {
        status: response.status,
        data: response.data
      });

      return response.data;
    } catch (error) {
      console.error('Register hatasƒ±:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      return handleError(error);
    }
  },

  // Giri≈ü yapma i≈ülemi
  login: async (telephone, password) => {
    try {
      // Telefon numarasƒ±nƒ± +90 ile ba≈ülat
      if (!telephone.startsWith('+90')) {
        telephone = '+90' + telephone.replace(/^0/, '');
      }
      const formData = {
        telephone: telephone,
        password: password
      };
      const response = await axios.post('http://localhost:8080/v1/api/auth/login', formData, {
        headers: { 'Content-Type': 'application/json' }
      });
      const data = response.data;
      // Yeni cihaz algƒ±landƒ±ysa √∂zel durum
      if (data && data.message && data.message.includes('Yeni cihaz algƒ±landƒ±')) {
        return { success: false, newDevice: true, message: data.message };
      }
      if (data && data.accessToken && data.refreshToken) {
        localStorage.setItem('accessToken', data.accessToken.token);
        localStorage.setItem('refreshToken', data.refreshToken.token);
        return { success: true, data };
      } else {
        throw new Error(data?.message || 'Giri≈ü ba≈üarƒ±sƒ±z oldu');
      }
    } catch (error) {
      return handleError(error);
    }
  },

  // Yeni cihaz i√ßin SMS doƒürulama
  phoneVerify: async ({ code, ipAddress, deviceInfo, appVersion, platform }) => {
    try {
      const response = await axios.post('http://localhost:8080/v1/api/auth/phone-verify', {
        code,
        ipAddress,
        deviceInfo,
        appVersion,
        platform
      }, {
        headers: { 'Content-Type': 'application/json' }
      });
      const data = response.data;
      if (data && data.accessToken && data.refreshToken) {
        localStorage.setItem('accessToken', data.accessToken.token);
        localStorage.setItem('refreshToken', data.refreshToken.token);
        return { success: true, data };
      } else {
        throw new Error(data?.message || 'Doƒürulama ba≈üarƒ±sƒ±z oldu');
      }
    } catch (error) {
      return handleError(error);
    }
  },

  // √áƒ±kƒ±≈ü yapma i≈ülemi
  logout: () => {
    localStorage.removeItem('token');
    window.location.href = '/login';
  },

  // Token kontrol√º
  isAuthenticated: () => {
    return !!localStorage.getItem('token');
  },

  // SMS doƒürulama
  verifyPhone: async (code) => {
    try {
      const response = await axios.post('http://localhost:8080/v1/api/user/verify/phone', { code }, {
        headers: { 'Content-Type': 'application/json' }
      });
      return response.data;
    } catch (error) {
      return handleError(error);
    }
  },

  // SMS kodunu tekrar g√∂nderme (Register i≈ülemi i√ßin)
  resendSmsCode: async (telephone) => {
    try {
      console.log('[RESEND_SMS] Yeniden SMS kodu g√∂nderiliyor:', telephone);
      
      // Telefon numarasƒ±nƒ± +90 ile ba≈ülat ve normalize et
      let normalizedPhone = telephone;
      if (!normalizedPhone.startsWith('+90')) {
        normalizedPhone = '+90' + normalizedPhone.replace(/^0/, '');
      }
      
      // Backend'in beklediƒüi format: ResendPhoneVerificationRequest
      const requestData = {
        telephone: normalizedPhone,
        // IP address ve User Agent backend tarafƒ±ndan otomatik ekleniyor
      };
      
      console.log('[RESEND_SMS] Backend\'e g√∂nderilecek veri:', requestData);
      
      // Kullanƒ±cƒ±nƒ±n belirttiƒüi endpoint: POST /v1/api/auth/resend-verify-code?telephone=XXX
      // Query parameter olarak telefon numarasƒ± g√∂nderiliyor
      const queryParams = new URLSearchParams({ telephone: normalizedPhone });
      const response = await axios.post(`http://localhost:8080/v1/api/auth/resend-verify-code?${queryParams}`, requestData, {
        headers: { 'Content-Type': 'application/json' }
      });
      
      console.log('[RESEND_SMS] SMS kodu ba≈üarƒ±yla g√∂nderildi:', response.data);
      return response.data;
    } catch (error) {
      console.error('[RESEND_SMS] SMS kodu g√∂nderilemedi:', error);
      
      // Backend'den gelen hata mesajƒ±nƒ± √∂ncelik ver
      const backendMessage = error.response?.data?.message;
      
      // √ñzel hata durumlarƒ±
      if (error.response?.status === 404) {
        // UserNotFoundException
        throw new Error(backendMessage || 'Kullanƒ±cƒ± bulunamadƒ±. L√ºtfen √∂nce kayƒ±t olun.');
      } else if (error.response?.status === 400) {
        // Ge√ßersiz telefon numarasƒ± vb.
        throw new Error(backendMessage || 'Ge√ßersiz telefon numarasƒ±.');
      } else if (error.response?.status === 429) {
        // Rate limiting - √ßok fazla istek
        throw new Error(backendMessage || '√áok fazla istek g√∂nderildi. L√ºtfen birka√ß dakika bekleyin.');
      }
      
      throw new Error(backendMessage || 'SMS kodu g√∂nderilirken bir hata olu≈ütu');
    }
  },

  // ≈ûifre sƒ±fƒ±rlama kodu doƒürulama
  passwordVerifyCode: async (verificationCodeRequest) => {
    try {
      const response = await axios.post('http://localhost:8080/v1/api/user/password/verify-code', verificationCodeRequest);
      return response.data;
    } catch (error) {
      return handleError(error);
    }
  },

  // Yeni ≈üifre belirleme
  passwordReset: async ({ resetToken, newPassword }) => {
    try {
      const response = await axios.post('http://localhost:8080/v1/api/user/password/reset', { resetToken, newPassword });
      return response.data;
    } catch (error) {
      return handleError(error);
    }
  },

  // Refresh token fonksiyonu
  refreshToken: async (refreshToken) => {
    try {
      const response = await axios.post('http://localhost:8080/v1/api/auth/refresh', { refreshToken });
      return response.data;
    } catch (error) {
      return handleError(error);
    }
  },

  // Kullanƒ±cƒ± profilini getiren fonksiyon
  getProfile: async () => {
    try {
      console.log('[PROFILE] Profil bilgisi √ßekiliyor...');
      
      try {
        // Doƒüru endpoint ile profil bilgisini getiriyoruz
        const response = await axios.get('http://localhost:8080/v1/api/user/profile', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('accessToken') || localStorage.getItem('token')}`
          }
        });
        console.log('[PROFILE] Profil bilgisi ba≈üarƒ±yla alƒ±ndƒ±:', response.data);
        
        // Backend'den gelen yanƒ±tƒ± detaylƒ± inceleyerek farklƒ± alan adlarƒ±nƒ± kontrol edelim
        const data = response.data;
        console.log('[PROFILE] Backend\'den gelen ham veri:', JSON.stringify(data));
        
        // Daha fazla olasƒ± alan adƒ± ekleyelim
        const possibleFirstNames = ['firstName', 'first_name', 'name', 'ad', 'firstname', 'given_name', 'givenName'];
        const possibleLastNames = ['lastName', 'last_name', 'surname', 'soyad', 'lastname', 'family_name', 'familyName'];
        const possibleEmails = ['email', 'mail', 'emailAddress', 'e_mail', 'email_address', 'userEmail'];
        const possiblePhotoUrls = ['photoUrl', 'photo_url', 'profilePhoto', 'avatarUrl', 'profilePicture', 'image', 'profileImage'];
        
        // T√ºm alanlarƒ± logla - JSON i√ßinde i√ß i√ße nesnelerde de kontrol edelim
        console.log('[PROFILE] Bulunan alan deƒüerleri:');
        
        // T√ºm JSON nesnesini d√ºz bir yapƒ±ya √ßevirelim (i√ß i√ße nesneleri d√ºzle≈ütirme)
        const flattenObject = (obj, prefix = '') => {
          return Object.keys(obj).reduce((acc, key) => {
            const pre = prefix.length ? `${prefix}.` : '';
            if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
              Object.assign(acc, flattenObject(obj[key], `${pre}${key}`));
            } else {
              acc[`${pre}${key}`] = obj[key];
            }
            return acc;
          }, {});
        };
        
        const flatData = flattenObject(data);
        
        // D√ºzle≈ütirilmi≈ü veriyi kontrol ederek alanlarƒ± bul
        const findValueByPossibleKeys = (flatObj, possibleKeys) => {
          for (const key of possibleKeys) {
            // Doƒürudan anahtar kontrol√º
            if (flatObj[key] !== undefined) {
              console.log(`- ${key}: ${flatObj[key]}`);
              return flatObj[key];
            }
            
            // ƒ∞√ß i√ße nesne i√ßindeki anahtar kontrol√º (d√ºzle≈ütirilmi≈ü formatta)
            for (const flatKey in flatObj) {
              if (flatKey.endsWith(`.${key}`)) {
                console.log(`- ${flatKey}: ${flatObj[flatKey]}`);
                return flatObj[flatKey];
              }
            }
          }
          return null;
        };
        
        // Her bir alan tipi i√ßin olasƒ± anahtarlarƒ± kontrol et
        const firstName = findValueByPossibleKeys(flatData, possibleFirstNames);
        const lastName = findValueByPossibleKeys(flatData, possibleLastNames);
        const email = findValueByPossibleKeys(flatData, possibleEmails);
        const photoUrl = findValueByPossibleKeys(flatData, possiblePhotoUrls);
        
        // T√ºm alanlarƒ± kontrol ederek profil nesnesini olu≈ütur
        const profileData = {
          // Ana alanlar - birden fazla olasƒ± adƒ± kontrol et
          firstName: firstName || '',
          lastName: lastName || '',
          email: email || '',
          photoUrl: photoUrl || '',
          
          // Orijinal alan adlarƒ± da sakla ki backend'e geri g√∂nderebilmek
          originalFieldNames: {
            firstName: possibleFirstNames.find(field => data[field] !== undefined) || 'firstName',
            lastName: possibleLastNames.find(field => data[field] !== undefined) || 'lastName',
            email: possibleEmails.find(field => data[field] !== undefined) || 'email'
          },
          
          // Ham veriyi de sakla (tam debugger i√ßin)
          _rawData: data
        };
        
        console.log('[PROFILE] Olu≈üturulan profil nesnesi:', profileData);
        
        // Profil bilgisini √∂nbelleƒüe kaydedelim
        localStorage.setItem('lastKnownProfile', JSON.stringify(profileData));
        
        return profileData;
      } catch (apiError) {
        console.warn('[PROFILE] API baƒülantƒ±sƒ±nda hata olu≈ütu, ge√ßici test verisi kullanƒ±lƒ±yor', apiError);
        console.error('Hata detaylarƒ±:', apiError.response?.data || apiError.message);
        
        // API √ßalƒ±≈ümadƒ±ƒüƒ±nda, son bilinen profil verisini localStorage'dan almaya √ßalƒ±≈ü
        const cachedProfile = localStorage.getItem('lastKnownProfile');
        if (cachedProfile) {
          try {
            const parsedProfile = JSON.parse(cachedProfile);
            console.log('[PROFILE] √ñnbellekten alƒ±nan profil:', parsedProfile);
            return parsedProfile;
          } catch (parseError) {
            console.error('[PROFILE] √ñnbellek verisi ayrƒ±≈ütƒ±rƒ±lamadƒ±:', parseError);
          }
        }
        
        // TEST: API √ßalƒ±≈ümazsa ve √∂nbellekte veri yoksa test verisi d√∂nd√ºr
        return {
          firstName: 'Test',
          lastName: 'Kullanƒ±cƒ±',
          email: 'test@example.com',
          photoUrl: '',
          // Diƒüer alanlar...
        };
      }
    } catch (error) {
      console.error('[PROFILE] Profil bilgisi alƒ±namadƒ±:', error);
      return handleError(error);
    }
  },

  // Kullanƒ±cƒ± profilini g√ºncelleyen fonksiyon
  updateProfile: async (updateData) => {
    try {
      console.log('[PROFILE] Profil g√ºncelleniyor:', updateData);
      
      // Girilen deƒüerlerin bo≈ü olup olmadƒ±ƒüƒ±nƒ± kontrol et
      if (!updateData.firstName || !updateData.lastName) {
        throw new Error('Ad ve soyad alanlarƒ± bo≈ü bƒ±rakƒ±lamaz!');
      }
      
      // Backend'in beklediƒüi tam parametreleri kontrol etmek i√ßin olasƒ± t√ºm alan adlarƒ±nƒ± deneyeceƒüiz
      // Java Spring Boot backend'in UpdateProfileRequest sƒ±nƒ±fƒ±nda hangi alanlarƒ± beklediƒüini bilmiyoruz
      // bu nedenle birka√ß olasƒ± varyantƒ± deneyeceƒüiz
      const requestData = {
        // Camel case (Java standart)
        firstName: updateData.firstName,
        lastName: updateData.lastName,
        email: updateData.email,
        
        // Alternatif alan adlarƒ± (T√ºrk√ße)
        ad: updateData.firstName, 
        soyad: updateData.lastName,
        
        // Snake case
        first_name: updateData.firstName,
        last_name: updateData.lastName,
        
        // Diƒüer varyantlar
        name: updateData.firstName,
        surname: updateData.lastName
      };
      
      console.log('[PROFILE] Backend\'e g√∂nderilecek geni≈ületilmi≈ü veri:', requestData);
      
      try {
        // Request √∂ncesi detaylƒ± log
        console.log('[PROFILE] Profil g√ºncellemesi i√ßin HTTP isteƒüi yapƒ±lƒ±yor:');
        console.log('- Endpoint: http://localhost:8080/v1/api/user/profile');
        console.log('- Metod: PUT');
        console.log('- Veri:', JSON.stringify(requestData, null, 2));
        
        // Backend'deki @PutMapping("/profile") ile e≈üle≈üen endpoint
        const token = localStorage.getItem('accessToken') || localStorage.getItem('token');
        if (!token) {
          throw new Error('Oturum bulunamadƒ±! L√ºtfen tekrar giri≈ü yapƒ±n.');
        }

        console.log('[PROFILE] Yetkilendirme token:', token.substring(0, 15) + '...');
        
        const response = await axios.put('http://localhost:8080/v1/api/user/profile', requestData, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        });
        console.log('[PROFILE] Profil ba≈üarƒ±yla g√ºncellendi:', response.data);
        
        // Backend'den d√∂nen veriyi i≈üle
        const responseData = response.data || {};
        
        // Backend'den gelen t√ºm olasƒ± alan adlarƒ±nƒ± kontrol et
        const updatedProfile = {
          message: responseData.message || 'Profil bilgileriniz ba≈üarƒ±yla g√ºncellendi.',
          
          // √ñncelikle backend yanƒ±tƒ±ndaki alanlarƒ± kontrol et
          firstName: responseData.firstName || responseData.first_name || responseData.ad || responseData.name || updateData.firstName,
          lastName: responseData.lastName || responseData.last_name || responseData.soyad || responseData.surname || updateData.lastName,
          
          // Email i√ßin √∂zel olarak t√ºm olasƒ± alanlarƒ± kontrol et
          email: responseData.email || responseData.mail || responseData.emailAddress || responseData.e_mail || updateData.email,
          
          // Diƒüer alanlarƒ± da ekle
          ...responseData
        };
        
        console.log('[PROFILE] D√∂nd√ºr√ºlen g√ºncellenmi≈ü profil:', updatedProfile);
        
        // Profil bilgisini localStorage'a da kaydedelim, b√∂ylece API baƒülantƒ±sƒ± olmasa bile 
        // son bilinen profil bilgisini g√∂sterebiliriz
        localStorage.setItem('lastKnownProfile', JSON.stringify(updatedProfile));
        
        return updatedProfile;
      } catch (apiError) {
        console.warn('[PROFILE] API hatasƒ±, istemci tarafƒ±nda g√ºncellenmi≈ü veri d√∂nd√ºr√ºl√ºyor:', apiError);
        
        // API hatasƒ± durumunda, kullanƒ±cƒ±nƒ±n g√∂nderdiƒüi bilgileri geri d√∂nd√ºr
        const fallbackProfile = { 
          message: 'Profil bilgileriniz g√ºncellendi (sunucu yanƒ±tƒ± alƒ±namadƒ±).',
          firstName: updateData.firstName,
          lastName: updateData.lastName,
          email: updateData.email,
          // Alternatif alan adlarƒ±
          ad: updateData.firstName,
          soyad: updateData.lastName,
          first_name: updateData.firstName,
          last_name: updateData.lastName,
          name: updateData.firstName,
          surname: updateData.lastName
        };
        
        // √ñnbellekte de saklayalƒ±m
        localStorage.setItem('lastKnownProfile', JSON.stringify(fallbackProfile));
        
        return fallbackProfile;
      }
    } catch (error) {
      console.error('[PROFILE] Profil g√ºncellenemedi:', error);
      return handleError(error);
    }
  },

  // Kullanƒ±cƒ± profil fotoƒürafƒ±nƒ± g√ºncelleyen fonksiyon
  updateProfilePhoto: async (photoFile) => {
    try {
      if (!photoFile) {
        throw new Error('L√ºtfen bir fotoƒüraf se√ßin!');
      }
      if (photoFile.size > 5 * 1024 * 1024) {
        throw new Error('Fotoƒüraf boyutu 5MB\'dan k√º√ß√ºk olmalƒ±dƒ±r!');
      }
      
      console.log('[PROFILE_PHOTO] Fotoƒüraf y√ºkleniyor:', photoFile.name, photoFile.size);
      
      // Backend'in beklediƒüi parametre adƒ± "photo" olmalƒ±
      const formData = new FormData();
      formData.append('photo', photoFile);
      const token = localStorage.getItem('accessToken') || localStorage.getItem('token');
      
      console.log('[PROFILE_PHOTO] FormData i√ßeriƒüi:', formData);
      console.log('[PROFILE_PHOTO] Fotoƒüraf adƒ±:', photoFile.name);
      console.log('[PROFILE_PHOTO] Fotoƒüraf tipi:', photoFile.type);
      console.log('[PROFILE_PHOTO] Fotoƒüraf boyutu:', photoFile.size);
      
      try {
        // @PutMapping("/profile/photo") endpoint'i ile uyumlu
        // @RequestParam("photo") MultipartFile parametresi i√ßin doƒüru isim kullanƒ±lmalƒ±
        console.log('[PROFILE_PHOTO] PUT isteƒüi: http://localhost:8080/v1/api/user/profile/photo');
        console.log('[PROFILE_PHOTO] FormData i√ßinde "photo" parametresi g√∂nderiliyor');
        
        const response = await axios.put('http://localhost:8080/v1/api/user/profile/photo', formData, {
          headers: {
            'Authorization': `Bearer ${token}`
            // Content-Type header'ƒ±nƒ± axios otomatik ekleyecek
            // ve doƒüru boundary deƒüeri ile multipart/form-data olarak ayarlayacak
          },
          // Dosya y√ºkleme ilerleme bilgisi ekle
          onUploadProgress: (progressEvent) => {
            const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            console.log(`[PROFILE_PHOTO] Y√ºkleme ilerleme: %${percentCompleted}`);
          }
        });
        
        console.log('[PROFILE_PHOTO] Fotoƒüraf ba≈üarƒ±yla y√ºklendi:', response.data);
        return response.data;
      } catch (apiError) {
        console.error('[PROFILE_PHOTO] API hatasƒ±:', apiError);
        console.error('[PROFILE_PHOTO] Hata detaylarƒ±:', {
          status: apiError.response?.status,
          statusText: apiError.response?.statusText,
          data: apiError.response?.data,
          headers: apiError.response?.headers
        });
        throw new Error(apiError.response?.data?.message || 'Fotoƒüraf y√ºklenemedi.');
      }
    } catch (error) {
      console.error('[PROFILE] Profil fotoƒürafƒ± g√ºncellenemedi:', error);
      
      // Tutarlƒ± hata mesajƒ± formatƒ± i√ßin
      const errorMessage = error.message || 'Profil fotoƒürafƒ± g√ºncellenirken bir hata olu≈ütu.';
      throw new Error(errorMessage);
    }
  },

  // Haber ekleme fonksiyonu (Admin i≈ülemi)
  addNews: async (newsData) => {
    try {
      console.log('[NEWS] Yeni haber ekleniyor:', newsData);
      
      // Girilen deƒüerlerin bo≈ü olup olmadƒ±ƒüƒ±nƒ± kontrol et
      if (!newsData.title || !newsData.content) {
        throw new Error('Ba≈ülƒ±k ve i√ßerik alanlarƒ± bo≈ü bƒ±rakƒ±lamaz!');
      }
      
      // Backend'e g√∂nderilecek veri formatƒ±
      const requestData = {
        title: newsData.title,
        content: newsData.content,
        image: newsData.image || null,
        priority: newsData.priority || 'NORMAL',
        type: newsData.type || 'DUYURU',
        endDate: newsData.endDate || null,
        active: newsData.active !== undefined ? newsData.active : true
      };
      
      console.log('[NEWS] Backend\'e g√∂nderilecek haber verisi:', requestData);
      
      const token = localStorage.getItem('accessToken') || localStorage.getItem('token');
      if (!token) {
        throw new Error('Oturum bulunamadƒ±! L√ºtfen tekrar giri≈ü yapƒ±n.');
      }

      console.log('[NEWS] Haber ekleme i√ßin HTTP isteƒüi yapƒ±lƒ±yor...');
      
      const response = await axios.post('http://localhost:8080/v1/api/news', requestData, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      
      console.log('[NEWS] Haber ba≈üarƒ±yla eklendi:', response.data);
      return response.data;
      
    } catch (error) {
      console.error('[NEWS] Haber eklenemedi:', error);
      
      // API hatasƒ± durumunda hata mesajƒ±nƒ± d√∂nd√ºr
      const errorMessage = error.response?.data?.message || error.message || 'Haber eklenirken bir hata olu≈ütu.';
      throw new Error(errorMessage);
    }
  },

  // Login SMS doƒürulama i√ßin tekrar kod g√∂nderme (Yeni cihaz doƒürulamasƒ±)
  resendLoginSmsCode: async (telephone) => {
    try {
      console.log('[RESEND_LOGIN_SMS] Yeniden SMS kodu g√∂nderiliyor (Login):', telephone);
      
      // Telefon numarasƒ±nƒ± +90 ile ba≈ülat ve normalize et
      let normalizedPhone = telephone;
      if (!normalizedPhone.startsWith('+90')) {
        normalizedPhone = '+90' + normalizedPhone.replace(/^0/, '');
      }
      
      // Backend'in beklediƒüi format
      const requestData = {
        telephone: normalizedPhone,
      };
      
      console.log('[RESEND_LOGIN_SMS] Backend\'e g√∂nderilecek veri:', requestData);
      
      // Aynƒ± resend endpoint'ini kullan - register ve login i√ßin aynƒ±
      const queryParams = new URLSearchParams({ telephone: normalizedPhone });
      const response = await axios.post(`http://localhost:8080/v1/api/auth/resend-verify-code?${queryParams}`, requestData, {
        headers: { 'Content-Type': 'application/json' }
      });
      
      console.log('[RESEND_LOGIN_SMS] SMS kodu ba≈üarƒ±yla g√∂nderildi:', response.data);
      return response.data;
    } catch (error) {
      console.error('[RESEND_LOGIN_SMS] SMS kodu g√∂nderilemedi:', error);
      
      // Backend'den gelen hata mesajƒ±nƒ± √∂ncelik ver
      const backendMessage = error.response?.data?.message;
      
      // √ñzel hata durumlarƒ±
      if (error.response?.status === 404) {
        throw new Error(backendMessage || 'Kullanƒ±cƒ± bulunamadƒ±.');
      } else if (error.response?.status === 400) {
        throw new Error(backendMessage || 'Ge√ßersiz telefon numarasƒ±.');
      } else if (error.response?.status === 429) {
        throw new Error(backendMessage || '√áok fazla istek g√∂nderildi. L√ºtfen birka√ß dakika bekleyin.');
      }
      
      throw new Error(backendMessage || 'SMS kodu g√∂nderilirken bir hata olu≈ütu');
    }
  },
};

export default AuthService;